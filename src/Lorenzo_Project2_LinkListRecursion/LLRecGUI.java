/**
******************************************************
***  Class Name: Lorenzo_Project2_LinkListRecursion.
***  Class Author:  Chris Lorenzo
******************************************************
* This class generates a random list of 500 links assigned
* with random int values. The GUI allows the user to enter a
* number to search for within the list and provides feedback
* as to whether the number was found or not, using the LinkList
* recursion method.
******************************************************
*** Date: 14 September 2017
******************************************************
*** Changes: N/A
******************************************************
*/
package Lorenzo_Project2_LinkListRecursion;

import com.sun.glass.events.KeyEvent;
import java.awt.Color;
import java.util.Random;

/**
 *
 * @author Chris
 */
public class LLRecGUI extends javax.swing.JFrame {

    /**
     * Creates new form LLRecGUI
     */
    public LLRecGUI() {
        initComponents();
        
        //Populate LinkList with 500 links
        
        int j;                  //Var to hold random int value
        String num;             //String var to hold converted random int value            
        String List = "";       //Var to hold the accumulated converted int values
        
        for(int i=0;i<500;i++)     //Cycle through loop to create randon integers
        {
            j = rand.nextInt(linkValMax)+1;      //Create a random integer and assign to var for processing
            myList.push(j);                 //Add link value to link list
            num = Integer.toString(j);      //Convert integer to string for printing purposes
            List += num + "\n";                    //Accumulate list String var with converted int values
        }
        
        msg(List);      //Print LinkList values in txtOutput box
    }

/**
******************************************************
***  Method Name: msg.
***  Method Author:  Chris Lorenzo
******************************************************
*   This method serves as a short cut for updating the
*   LinkList output in the txtOutput box.*   
* 
*   Method Inputs:
*   — One String variable
*   Return Value:
*   — None
* 
******************************************************
*** Date: 14 September 2017
******************************************************
*** Changes: N/A
******************************************************
*/      
    public void msg(String List)
    {
        txtOutput.setText(List);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtInput = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        lblResults = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtOutput = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Link List Recursion");
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Lithos Pro", 0, 24)); // NOI18N
        jLabel1.setText("Link List Recursion");

        jLabel3.setFont(new java.awt.Font("Microsoft Yi Baiti", 1, 30)); // NOI18N
        jLabel3.setText("Link List:");

        jLabel4.setText("Enter an Integer to Search For:");

        txtInput.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtInputKeyPressed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jLabel5.setText("Results: ");

        lblResults.setFont(new java.awt.Font("Courier", 1, 14)); // NOI18N
        lblResults.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblResults.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtOutput.setColumns(20);
        txtOutput.setLineWrap(true);
        txtOutput.setRows(5);
        txtOutput.setText("txtOutput");
        jScrollPane2.setViewportView(txtOutput);

        jLabel2.setText("List Beginning:");

        jLabel6.setText("List End:");

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 0, 8)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(153, 153, 153));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Created by: Chris Lorenzo");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(135, 135, 135)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel6)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel3)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel4)
                            .addComponent(txtInput, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSearch)
                            .addComponent(jLabel5)
                            .addComponent(lblResults, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 246, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addGap(32, 32, 32))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addGap(8, 8, 8)
                .addComponent(jLabel6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 630, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(12, 12, 12)
                                .addComponent(txtInput, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(btnSearch)
                                .addGap(41, 41, 41)
                                .addComponent(jLabel5)
                                .addGap(35, 35, 35)
                                .addComponent(lblResults, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(3, 3, 3)
                        .addComponent(jLabel2)
                        .addContainerGap(29, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addGap(20, 20, 20))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

/**
******************************************************
***  Method Name: btnSearchActionPerformed.
***  Method Author:  Chris Lorenzo
******************************************************
*   This method is responsible for calling the LinkList's
*   pop method to remove the last link placed on the stack.
*   This method also cycles through the linkArray in order 
*   to update the GUI label, while removing the last link 
*   value in the stack.  This method will inform the user
*   of NULL values when all links have been popped.
* 
*   Method Inputs:
*   — ActionEvent
*   Return Value:
*   — None
* 
******************************************************
*** Date: 14 September 2017
******************************************************
*** Changes: N/A
******************************************************
*/ 
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:

        try
        {
            int numSearch = Integer.parseInt(txtInput.getText());   //Convert user input into int
            
            if(numSearch > 0 && numSearch <= linkValMax)       //Check to see if search value is within bounds of possible link values
            {
                
                Link myLink;                                            //Create a Link var
                myLink = myList.search(numSearch);                      //Instantiate new Link Object using converted int and assigned to link var myLink
                //Check if myLink is null
                if(myLink != null && myLink.nextLink != null)                              
                {
                    lblResults.setText("<html>Number "+myLink.value+" was found before <br>(below) "+myLink.nextLink.value+"</html>");
                    lblResults.setForeground(Color.blue);       //Change msg font color to blue if num found
                    txtInput.requestFocus();                    //return focus to input box to check for another value
                }
                else if(myLink != null && myLink.nextLink == null)
                        {
                            lblResults.setText("<html>Number "+myLink.value+" was found at the <br>end of the list</html> ");
                            lblResults.setForeground(Color.blue);       //Change msg font color to blue if num found
                        }
                else
                {
                    lblResults.setText(numSearch +" is not in the list.");       
                    lblResults.setForeground(Color.red);        //Change font color to red if num not found
                }
                
            }
            else
            {
                lblResults.setText("Search value must be between 1-"+linkValMax);
                lblResults.setForeground(Color.red);            //Change font color to red if search num is out of bounds
            }
            
            
        }
        catch (NumberFormatException e)     //Catch exceptions that are not integers
                {
                    lblResults.setText("<html>Invalid Input, please enter an<br>integer between 1-3000!<html>");
                    lblResults.setForeground(Color.red);        //Change font color to red if invalid input entered
                }
        
    }//GEN-LAST:event_btnSearchActionPerformed

/**
******************************************************
***  Method Name: txtInputKeyPressed.
***  Method Author:  Chris Lorenzo
******************************************************
*   This method responds to the keyboard enter key
*   and executes all code as if the user clicked the search
*   button
* 
*   Method Inputs:
*   — ActionEvent
*   Return Value:
*   — None
* 
******************************************************
*** Date: 14 September 2017
******************************************************
*** Changes: N/A
******************************************************
*/     
    
    private void txtInputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtInputKeyPressed
        // TODO add your handling code here:
        //repsond to ENTER button to perform all code in search operation
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            
            btnSearch.doClick();
            txtInput.selectAll();
        }
        
    }//GEN-LAST:event_txtInputKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LLRecGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LLRecGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LLRecGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LLRecGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LLRecGUI().setVisible(true);
            }
        });
    }

    private Random rand = new Random();                     //New random var to issue random numbers in btnSearch event
    private LinkList myList = new LinkList();               //New LinkList to hold and manage links
    private int linkValMax = 3000;  //Max possible value for links

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel lblResults;
    private javax.swing.JTextField txtInput;
    private javax.swing.JTextArea txtOutput;
    // End of variables declaration//GEN-END:variables
}
